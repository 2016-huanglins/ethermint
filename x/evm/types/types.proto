syntax = "proto3";
package ethermint.x.evm.v1;

import "third_party/proto/cosmos-sdk/types/types.proto";
import "third_party/proto/gogoproto/gogo.proto";

option go_package = "github.com/cosmos/ethermint/x/evm/types";

// MsgEthereumTx encapsulates an Ethereum transaction as an SDK message.
message MsgEthereumTx {
  option (gogoproto.goproto_getters) = false;

  TxData data = 1 [
    (gogoproto.nullable) = false
  ];
  // caches
  double size = 2 [
    (gogoproto.customname) = "size"
  ];
  SigCache from = 3 [
    (gogoproto.customname) = "from"
  ];
}

// TxData implements the Ethereum transaction data structure. It is used
// solely as intended in Ethereum abiding by the protocol.
message TxData {
  option (gogoproto.goproto_getters) = false;

  uint64 nonce = 1 [
    (gogoproto.customname) = "AccountNonce"
  ];
  bytes  price = 2;
  uint64 gas   = 3 [
    (gogoproto.customname) = "GasLimit"
  ];
  bytes to = 4 [
    (gogoproto.customname) = "Recipient",
    (gogoproto.moretags)   = "rlp:\"nil\""
  ];
  bytes value = 5 [
    (gogoproto.customname) = "Amount"
  ];
  bytes input = 6 [
    (gogoproto.customname) = "Payload"
  ];
  bytes v = 7;
  bytes r = 8;
  bytes s = 9;
  // hash is only used when marshaling to JSON
  bytes hash = 10 [
    (gogoproto.moretags) = "rlp:\"-\""
  ];
}

// SigCache is used to cache the derived sender and contains the signer used
// to derive it.
message SigCache {
  EIP155Signer signer = 1 [
    (gogoproto.customname) = "signer"
  ];
  bytes from = 2 [
    (gogoproto.customname) = "from"
  ];
}

// EIP155Transaction implements Signer using the EIP155 rules.
message EIP155Signer {
  bytes chain_id = 1 [
    (gogoproto.customname) = "chainId"
  ];
  bytes chain_id_mul = 2 [
    (gogoproto.customname) = "chainIdMul"
  ];
}

// MsgEthermint implements a cosmos equivalent structure for Ethereum transactions
message MsgEthermint {
  option (gogoproto.goproto_getters) = false;

  uint64 nonce = 1 [
    (gogoproto.customname) = "AccountNonce"
  ];
  cosmos_sdk.v1.IntProto price = 2 [
    (gogoproto.nullable) = false
  ];
  uint64 gas = 3 [
    (gogoproto.customname) = "GasLimit"
  ];
  bytes to = 4 [
    (gogoproto.casttype)   = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.customname) = "Recipient",
    (gogoproto.moretags)   = "rlp:\"nil\""
  ];
  cosmos_sdk.v1.IntProto value = 5 [
    (gogoproto.customname) = "Amount",
    (gogoproto.nullable)   = false
  ];
  bytes input = 6 [
    (gogoproto.customname) = "Payload"
  ];
  // From address (formerly derived from signature)
  bytes from = 7 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}